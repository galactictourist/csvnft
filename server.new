const dotenv = require('dotenv');
dotenv.config();
const pusher = require('./pusherClient.js');
const initializeNFTMinter = require("./nftMinter.js");
const { readDataStore, writeDataStore } = require('./dataStore.js');
const scheduleMinting = require('./scheduler.js');

(async () => {
    const { useConnect, useSendTransaction, useSetActiveWallet } = await import("thirdweb/react");
    const { inAppWallet, privateKeyToAccount, createWallet } = await import("thirdweb/wallets");
    const clientModule = await import("./twClient.js");
    const client = clientModule.default;
    const { polygonAmoy } = await import("thirdweb/chains");
    const { Address, prepareContractCall, sendAndConfirmTransaction, getContract } = await import("thirdweb");

    const { mintNFT, uploadToIPFS } = await initializeNFTMinter();

    // Verify that mintNFT and uploadToIPFS are imported correctly
    console.log('mintNFT function:', mintNFT);
    console.log('uploadToIPFS function:', uploadToIPFS);

    // Subscribe to the 'transactions' channel
    const txchannel = pusher.subscribe('transactions');
    txchannel.bind('pusher:subscription_succeeded', () => {
        console.log('Subscribed to transactions channel');
    });

    txchannel.bind('App\\Events\\TransactionUpdated', async (data) => {
        console.log('TransactionUpdated:', data);
        const dataStore = readDataStore();
        dataStore.transactions.push({ ...data.data, minted: false });
        writeDataStore(dataStore);
    });

    // Subscribe to the 'shipments' channel
    const shipmentchannel = pusher.subscribe('shipments');
    shipmentchannel.bind('pusher:subscription_succeeded', () => {
        console.log('Subscribed to shipments channel');
    });

    shipmentchannel.bind('App\\Events\\ShipmentAdded', async (data) => {
        console.log('ShipmentAdded:', data);
        const dataStore = readDataStore();
        dataStore.shipments.push({ ...data.data, minted: false });
        writeDataStore(dataStore);
    });

    // Start the scheduler
    scheduleMinting();

    // To gracefully handle shutdowns
    process.on('SIGINT', () => {
        console.log('Shutting down...');
        txchannel.unbind_all();
        txchannel.unsubscribe();
        shipmentchannel.unbind_all();
        shipmentchannel.unsubscribe();
        process.exit();
    });
})();